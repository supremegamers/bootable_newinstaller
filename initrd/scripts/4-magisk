# make sure urandom character exists


random_str(){
local FROM
local TO
FROM="$1"; TO="$2"
tr -dc A-Za-z0-9 </dev/urandom | head -c $(($FROM+$(($RANDOM%$(($TO-$FROM+1))))))
}


magisk_postfsdata=`random_str 7 15`
magisk_service=`random_str 7 15`
magisk_boot_complete=`random_str 7 15`
dev_random=`random_str 7 12`

sed -i "s|magisk_postfsdata|$magisk_postfsdata|g" /magisk/init.kokoro.rc
sed -i "s|magisk_service|$magisk_service|g" /magisk/init.kokoro.rc
sed -i "s|magisk_boot_complete|$magisk_boot_complete|g" /magisk/init.kokoro.rc
sed -i "s|MAGISKTMP_PLACEHOLDER|/dev/$dev_random|g" /magisk/init.kokoro.rc
sed -i "s|MAGISKTMP_PLACEHOLDER|/dev/$dev_random|g" /magisk/overlay.sh


inittmp=/android/dev
mount -t tmpfs tmpfs $inittmp
mkdir -p $inittmp/.overlay/upper
mkdir -p $inittmp/.overlay/work

mount_data_part(){
MP="$1"
	mountpoint -q "$MP" && return
	if [ -n "$DATA" ]; then
		blk=`basename $DATA`
		if [ -b "/dev/$blk" ]; then
			[ ! -e /dev/block/$blk ] && ln /dev/$blk /dev/block
			mount -o noatime /dev/block/$blk "$MP"
		elif [ "$DATA" = "9p" ]; then
			modprobe 9pnet_virtio
			mount -t 9p -o trans=virtio data "$MP" -oversion=9p2000.L,posixacl,cache=loose
		else
			remount_rw
			mkdir -p /mnt/$SRC/$DATA
			mount --bind /mnt/$SRC/$DATA "$MP"
		fi
	elif [ -d /mnt/$SRC/data ]; then
		remount_rw
		mount --bind /mnt/$SRC/data "$MP"
	elif [ -f /mnt/$SRC/data.img ]; then
		remount_rw
		mount -o loop,noatime /mnt/$SRC/data.img "$MP"
	else
		device_mount_data || mount -t tmpfs tmpfs "$MP"
	fi
}

if mount -t tmpfs | grep -q " /android " || mount -t rootfs | grep -q " /android "; then
# rootfs, patch ramdisk
mount -o rw,remount /android
mkdir /android/magisk
sed -i "s|MAGISK_FILES_BASE|/magisk|g" /magisk/overlay.sh
sed -i "s|MAGISK_FILES_BASE|/magisk|g" /magisk/init.kokoro.rc
cp -a /magisk/* /android/magisk
[ ! -f "/magisk/init.rc" ] && cat /init.rc >/magisk/init.rc
[ -f "/magisk/init.rc" ] && cat /magisk/init.rc >/init.rc
cat /magisk/init.kokoro.rc >>/android/init.rc
else
sysblock="$(mount | grep " /android " | tail -1 | awk '{ print $1 }')"
mkdir /system_root
mount $sysblock /system_root
# prepare for second stage
chmod 750 $inittmp
mount -t overlay tmpfs -o lowerdir=/android/system/etc/init,upperdir=$inittmp/.overlay/upper,workdir=$inittmp/.overlay/work /android/system/etc/init
sed -i "s|MAGISK_FILES_BASE|/system/etc/init/magisk|g" /magisk/overlay.sh
sed -i "s|MAGISK_FILES_BASE|/system/etc/init/magisk|g" /magisk/init.kokoro.rc
cp -a /magisk $inittmp/.overlay/upper
cp /magisk/init.kokoro.rc $inittmp/.overlay/upper/init.kokoro.rc
fi

# pre-init sepolicy patch


mkdir -p /data
mount_data_part /data
[ ! -f "/magisk/magiskpolicy" ] && ln -sf ./magiskinit /magisk/magiskpolicy

module_policy="$inittmp/.overlay/sepolicy.rules"

rm -rf "$module_policy"

echo "allow su * * *">"$module_policy"

# /data on Android-x86 is not always encrypted


for module in $(ls /data/adb/modules); do
              if ! [ -f "/data/adb/modules/$module/disable" ] && [ -f "/data/adb/modules/$module/sepolicy.rule" ]; then
                  cat  "/data/adb/modules/$module/sepolicy.rule" >>"$module_policy"
                  echo "" >>"$module_policy"
                  
              fi
          done

bind_policy(){
policy="$1"
/magisk/magiskpolicy --load "$policy" --save "$inittmp/.overlay/policy" --magisk "allow * magisk_file lnk_file *"
/magisk/magiskpolicy --load "$inittmp/.overlay/policy" --save "$inittmp/.overlay/policy" --apply "$module_policy"
mount --bind $inittmp/.overlay/policy "$policy"
}

umount -l /data

# bind mount modified sepolicy

if [ -f /android/system/vendor/etc/selinux/precompiled_sepolicy ]; then
  bind_policy /android/system/vendor/etc/selinux/precompiled_sepolicy
elif [ -f /android/sepolicy ]; then
  bind_policy /android/sepolicy
fi
umount -l $inittmp
mount -o ro,remount /android
