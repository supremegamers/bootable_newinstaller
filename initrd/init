#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Last updated 2018/01/26
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/sbin:/bin:/system/bin:/system/xbin; export PATH

# auto installation
[ -n "$AUTO_INSTALL" ] && INSTALL=1

# configure debugging output
if [ -n "$DEBUG" -o -n "$INSTALL" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>> $LOG

chmod 755 /sbin/mount.ntfs-3g
chmod 755 /sbin/grub
chmod 755 /sbin/mkntfs
chmod 755 /sbin/efibootmgr

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc and /sys
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	# let busybox install all applets as symlinks
	busybox --install -s
	# spawn shells on tty 2 and 3 if debug or installer
	if test -n "$DEBUG" || test -n "$INSTALL"; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if test -z "$DEBUG" || test -n "$INSTALL"; then
		echo 0 0 0 0 > /proc/sys/kernel/printk
	fi
	# initialise /dev (first time)
	mkdir -p /dev/block
	echo /sbin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

error()
{
	echo $*
	return 1
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		mount -o $RW,noatime,nolock $@
		return $?
	fi
	case $(blkid $1) in
		*TYPE=*ntfs*)
			mount.ntfs-3g -o rw,force $@
			;;
		*TYPE=*)
			mount -o $RW,noatime $@
			;;
		*)
			return 1
			;;
	esac
}

extract_magisk_apk(){



mkdir -p "$TMPDIR/magisk32"
mkdir -p "$TMPDIR/magisk"
 

unzip -o "$APKFILE" "lib/x86_64/*" -d "$TMPDIR/magisk" &>/dev/null
chmod -R 777 "$TMPDIR/magisk"
unzip -o "$APKFILE" "lib/x86/*" -d "$TMPDIR/magisk32" &>/dev/null
chmod -R 777 "$TMPDIR/magisk32"

}


random_str(){
local FROM
local TO
FROM="$1"; TO="$2"
tr -dc A-Za-z0-9 </dev/urandom | head -c $(($FROM+$(($RANDOM%$(($TO-$FROM+1))))))
}


magisk_loader(){
    local item

    magisk_postfsdata=`random_str 6 15`
    magisk_service=`random_str 6 15`
    magisk_boot_complete=`random_str 6 15`
    dev_random=`random_str 7 10`

    # always use "/dev/<random_string>" as magisk tmpfs
    MAGISKTMP="/dev/$dev_random"
    echo -e "\nMAGISKTMP=/dev/$dev_random" >>/bin/utils.sh
    for item in post-fs-data.sh service.sh magisk.rc overlay.sh magisksu_survival.sh; do
         sed -i "s|\${{MAGISKTMP}}|$MAGISKTMP|g" /magisk/$item
    done
    sed -i "s|\${{POSTFSDATA}}|$magisk_postfsdata|g" /magisk/magisk.rc
    sed -i "s|\${{SERVICE}}|$magisk_service|g" /magisk/magisk.rc
    sed -i "s|\${{BOOTCOMPLETED}}|$magisk_boot_complete|g" /magisk/magisk.rc
}





check_root()
{
	if [ "`dirname $1`" = "/dev" ]; then
		[ -e $1 ] || return 1
		blk=`basename $1`
		[ ! -e /dev/block/$blk ] && ln $1 /dev/block
		dev=/dev/block/$blk
	else
		dev=$1
	fi
	try_mount ro $dev /mnt || return 1
	if [ -n "$iso" -a -e /mnt/$iso ]; then
		mount --move /mnt /iso
		mkdir /mnt/iso
		mount -o loop /iso/$iso /mnt/iso
	fi
  INITRD_REAL=initrd_real.img
  APKFILE=/mnt/$SRC/magisk.apk
  echo "$dev" >"$MAGISKCORE/osroot_dev"
	if [ -e /mnt/$SRC/$INITRD_REAL ]; then
		zcat /mnt/$SRC/$INITRD_REAL | cpio -id > /dev/null
                INITRD_IMAGE="/mnt/$SRC/$INITRD_REAL"
  elif [ -e /mnt/$SRC/initrd.img ]; then
    zcat /mnt/$SRC/initrd.img | cpio -id > /dev/null
                INITRD_IMAGE="/mnt/$SRC/initrd.img"
	elif [ -b /dev/$INITRD_REAL ]; then
		zcat /dev/$INITRD_REAL | cpio -id > /dev/null
                INITRD_IMAGE="/dev/$INITRD_REAL"
	else
		return 1
	fi
     err="$?"
     if [ ! -f "/mnt/$SRC/boot-magisk.img" ]; then
         rm -rf  "/mnt/$SRC/boot-magisk.img"
         zcat "/boot.img.gz" >"/mnt/$SRC/boot-magisk.img"
     fi
     return "$err"
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo /mnt
}

warn_no_magisk(){
echo "WARNING: magisk.apk does not exist. Boot Android with no Magisk"
}


debug_shell()
{
	if [ -x system/bin/sh ]; then
		echo Running MirBSD Korn Shell...
		USER="($1)" system/bin/sh -l 2>&1
	else
		echo Running busybox ash...
		sh 2>&1
	fi
}

abort(){
echo "$1"
sleep 5
exit 1
}



prepare_script(){

gzip -d /magisk/*.gz
chmod 777 /magisk/*

cat <<EOF >/magisk/boot.rc

on post-fs-data

# implement boot image
    mkdir /dev/block/by-name
    symlink \${{BOOTIMAGE}} /dev/block/by-name/boot
    symlink \${{SYSTEMIMAGE}} /dev/block/by-name/system
    symlink \${{DATAIMAGE}} /dev/block/by-name/data

EOF

cat <<EOF >/magisk/unmount.rc


on post-fs

# implement boot image
    umount /init.rc
    umount /system/etc/init

EOF

cat <<EOF >/magisk/magisk.rc

    

on early-init
    # initialize magisk enviroment
    umount /sbin
    mkdir \${{MAGISKTMP}}
    mount tmpfs tmpfs \${{MAGISKTMP}}
    chmod 755 \${{MAGISKTMP}}

on post-fs-data
    #remove rusty-magisk gearlock module
    rm /data/ghome/gearboot/overlay/rusty-magisk/init/init.superuser.rc
    rm /data/.rusty-magisk/magisk.apk
    rm /data/.rusty-magisk/magisk
    rm /data/ghome/.local/bin/rusty-magisk


    start logd
    start adbd
    rm /dev/.magisk_unblock
    copy MAGISK_FILES_BASE/overlay.sh /dev/magisk_overlay.sh
    exec u:r:su:s0 root root -- MAGISK_FILES_BASE/busybox sh -o standalone /dev/magisk_overlay.sh
    rm /dev/magisk_overlay.sh
    # start magisk post-fs-data event
    start \${{POSTFSDATA}}

    # wait all magisk post-fs-data jobs are completed or 40s  has passed
    wait /dev/.magisk_unblock 40
    rm /dev/.magisk_unblock

service \${{POSTFSDATA}} \${{MAGISKTMP}}/magisk --post-fs-data
    user root
    seclabel u:r:magisk:s0
    oneshot

service \${{SERVICE}} \${{MAGISKTMP}}/magisk --service
    class late_start
    user root
    seclabel u:r:magisk:s0
    oneshot

on property:sys.boot_completed=1

    # start magisk boot_completed event
    start \${{BOOTCOMPLETED}}

    # remove magisk service traces from some detection
    # although detect modified init.rc is not always correct

    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc.\${{POSTFSDATA}}
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc.\${{SERVICE}}
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc.\${{BOOTCOMPLETED}}
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc_debug_pid.\${{POSTFSDATA}}
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc_debug_pid.\${{SERVICE}}
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop --delete init.svc_debug_pid.\${{BOOTCOMPLETED}}

    # hide unencrypted data
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk resetprop ro.crypto.state encrypted

    # custom script
    exec_background u:r:magisk:s0 root root -- \${{MAGISKTMP}}/busybox sh -o standalone \${{MAGISKTMP}}/emu/magisksu_survival.sh

service \${{BOOTCOMPLETED}} \${{MAGISKTMP}}/magisk --boot-complete
    user root
    seclabel u:r:magisk:s0
    oneshot

# handle zygote restart / crash (need Magisk v25+)
on property:init.svc.zygote=restarting
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk --zygote-restart

on property:init.svc.zygote=stopped
    exec u:r:magisk:s0 root root -- \${{MAGISKTMP}}/magisk --zygote-restart


EOF

cat <<EOF >/magisk/overlay.sh
#!MAGISK_FILES_BASE/busybox sh
export PATH=/sbin:/system/bin:/system/xbin
# initial function
mnt_tmpfs(){ (
    # MOUNT TMPFS ON A DIRECTORY
    MOUNTPOINT="\$1"
    mkdir -p "\$MOUNTPOINT"
    mount -t tmpfs -o "mode=0755" tmpfs "\$MOUNTPOINT" 2>/dev/null && dmesg_log "mnt_tmpfs: \$MOUNTPOINT <- tmpfs"
) }
mnt_bind(){ (
    # SHORTCUT BY BIND MOUNT
    FROM="\$1"; TO="\$2"
    if [ -L "\$FROM" ]; then
        SOFTLN="\$(readlink "\$FROM")"
        ln -s "\$SOFTLN" "\$TO"
        dmesg_log "create link: \$SOFTLN <- \$TO"
    elif [ -d "\$FROM" ]; then
        mkdir -p "\$TO" 2>/dev/null
        mount --bind "\$FROM" "\$TO"
        dmesg_log "mnt_bind: \$TO <- \$FROM"
    else
        echo -n 2>/dev/null >"\$TO"
        mount --bind "\$FROM" "\$TO"
        dmesg_log "mnt_bind: \$TO <- \$FROM"
    fi
) }
cmdline() { 
awk -F"\${1}=" '{print \$2}' < /proc/cmdline | cut -d' ' -f1 2> /dev/null
}
revert_changes(){
     #remount system read-only to fix Magisk fail to mount mirror
     if mount -t rootfs | grep -q " / " || mount -t tmpfs | grep -q " / "; then
        mount -o rw,remount /
        rm -rf /magisk
     fi
     mount -o ro,remount /
     mount -o ro,remount /system
     mount -o ro,remount /vendor
     mount -o ro,remount /product
     mount -o ro,remount /system_ext
     # unmount patched files
     umount -l /system/etc/init
     umount -l /init.rc
     umount -l /system/etc/init/hw/init.rc
     umount -l /sepolicy
     umount -l /system/vendor/etc/selinux/precompiled_sepolicy
}
exit_magisk(){
     umount -l \${{MAGISKTMP}}
     revert_changes
     echo -n >/dev/.magisk_unblock
}

dmesg_log(){
     echo "initrd-magisk: \$1" >/dev/kmsg
} 

copy(){
    cp -af "\$1" "\$2" && dmesg_log "copy: \$2 <- \$1"
}


# make sure /dev/null exist
[ -c "/dev/null" ] || { rm -rf /dev/null; mknod -m 666 /dev/null c 1 3; }

# detect architecture
  API=\$(getprop ro.build.version.sdk)
  ABI=\$(getprop ro.product.cpu.abi)
  if [ "\$ABI" = "x86" ]; then
    ARCH=x86
    ABI32=x86
    IS64BIT=false
  elif [ "\$ABI" = "arm64-v8a" ]; then
    ARCH=arm64
    ABI32=armeabi-v7a
    IS64BIT=true
  elif [ "\$ABI" = "x86_64" ]; then
    ARCH=x64
    ABI32=x86
    IS64BIT=true
  else
    ARCH=arm
    ABI=armeabi-v7a
    ABI32=armeabi-v7a
    IS64BIT=false
  fi

magisk_name="magisk32"
[ "\$IS64BIT" == true ] && magisk_name="magisk64"

# umount previous /sbin tmpfs overlay

count=0
( magisk --stop ) &

# force umount /sbin tmpfs

until ! mount | grep -q " /sbin "; do
    [ "\$count" -gt 10 ] && break
    umount -l /sbin 2>/dev/null
    sleep 0.1
    count=1
    test ! -d /sbin && break
done

MAGISKTMP=\${{MAGISKTMP}}

cp -af MAGISK_FILES_BASE/sbin/* \$MAGISKTMP
chmod 755 "\$MAGISKTMP"
mkdir -p \$MAGISKTMP/.magisk
mkdir -p \$MAGISKTMP/emu
exec 2>/dev/kmsg 

cd MAGISK_FILES_BASE 
test ! -f "./\$magisk_name" && magisk_name=magisk32
test ! -f "./\$magisk_name" && { echo -n >/dev/.overlay_unblock; exit_magisk; exit 0; }

MAGISKBIN=/data/adb/magisk
mkdir /data/unencrypted
chmod 700 /data/unencrypted

# create some folder in magisk secure directory
for mdir in . modules post-fs-data.d service.d magisk; do
    chattr -i /data/adb/\$mdir
    test ! -d /data/adb/\$mdir && rm -rf /data/adb/\$mdir
    mkdir -p /data/adb/\$mdir 2>/dev/null
done

# make sure /data/adb/magisk is not immune
chattr -R -i /data/adb/magisk

# copy files to MAGISKBIN and MAGISKTMP
for file in magisk32 magisk64 magiskinit magiskpolicy busybox mount.fuse; do
  copy ./\$file \$MAGISKTMP/\$file 2>/dev/null
  chmod 755 \$MAGISKTMP/\$file
done

# copy magiskboot and magisk.apk
copy ./magiskboot \$MAGISKBIN/magiskboot
[ -f "./magisk.apk" ] && copy ./magisk.apk \$MAGISKTMP/magisk.apk || ./magiskinit -x manager \$MAGISKTMP/magisk.apk
ln \$MAGISKTMP/magisk.apk \$MAGISKTMP/stub.apk


# create symlink to magisk
ln -s ./\$magisk_name \$MAGISKTMP/magisk 2>/dev/null
ln -s ./magisk \$MAGISKTMP/su 2>/dev/null
ln -s ./magisk \$MAGISKTMP/resetprop 2>/dev/null
ln -s ./magisk \$MAGISKTMP/magiskhide 2>/dev/null

# from 24302 magiskpolicy is no longer an applet of magiskinit
# only create symlink if magiskpolicy is not found
[ -f "\$MAGISKBIN/magiskpolicy" ] && copy "\$MAGISKBIN/magiskpolicy" "\$MAGISKTMP/magiskpolicy"
[ ! -f "\$MAGISKTMP/magiskpolicy" ] && ln -s ./magiskinit \$MAGISKTMP/magiskpolicy
ln -s ./magiskpolicy \$MAGISKTMP/supolicy 2>/dev/null

# create some folder for magisk
mkdir -p \$MAGISKTMP/.magisk/mirror
mkdir \$MAGISKTMP/.magisk/block
cat MAGISK_FILES_BASE/config >\$MAGISKTMP/.magisk/config
restorecon -R /data/adb/magisk

cat MAGISK_FILES_BASE/magisksu_survival.sh >\$MAGISKTMP/emu/magisksu_survival.sh

OSROOT="\$(cat MAGISK_FILES_BASE/osroot_dev)"
if [ ! -z "\$OSROOT" ]; then
    BLOCKNAME="\${OSROOT##*/}"
    ln -s "./\$BLOCKNAME" "\$MAGISKTMP/.magisk/mirror/osroot"
fi

SRC="\$(cmdline SRC)"
BIPATH="\$(cmdline BOOT_IMAGE)"
test -z "\$SRC" && SRC="\${BIPATH%/*}"
if [ ! -z "\$SRC" ]; then
    ln -s "./osroot/\$SRC" "\$MAGISKTMP/.magisk/mirror/android"
fi

# if magisk does not exist
[ ! -f "\$MAGISKTMP/magisk" ] && exit_magisk


( #fix mount data mirror
data_inode="\$(ls -id "/data" | awk '{ print \$1 }')"
dmesg_log "Data inode = [\$data_inode]"
[ "\$data_inode" == "1" ] && exit
if [ "\$data_inode" != "2" ] && [ "\$data_inode" != "3" ]; then
    dmesg_log "/data is non-device mountpoint"
    CHECKBLOCK="\$(mountpoint -d "/data")"
    blk_major="\${CHECKBLOCK%:*}"
    blk_minor="\${CHECKBLOCK: \${#blk_major}+1}"
    mknod -m 660 "\$MAGISKTMP/.magisk/block/data" b "\$blk_major" "\$blk_minor"
    mkdir -p "\$MAGISKTMP/.magisk/mirror/data"
    mount "\$MAGISKTMP/.magisk/block/data" "\$MAGISKTMP/.magisk/mirror/data" && dmesg_log "mount: \$MAGISKTMP/.magisk/block/data -> \$MAGISKTMP/.magisk/mirror/data"
    rm -rf "\$MAGISKTMP/.magisk/block/data"
    mknod -m 660 "\$MAGISKTMP/.magisk/block/data" b 0 0
    touch "\$MAGISKTMP/.magisk/block/data"
    chattr +i "\$MAGISKTMP/.magisk/block/data"

    DATA="\$(cmdline DATA)"
    test -z "\$SRC" && SRC="\${BIPATH%/*}"
    test -z "\$SRC" && exit
    test -z "\$DATA" && DATA=data

    inode_data1=\$(ls -id "\$MAGISKTMP/.magisk/mirror/data/\$SRC/\$DATA" | awk '{ print \$1 }')
    inode_data2=\$(ls -id "\$MAGISKTMP/.magisk/mirror/data/\$SRC/data" | awk '{ print \$1 }')
    inode_data=\$(ls -id "/data" | awk '{ print \$1 }')

    if [ "\$inode_data1" == "\$inode_data" ]; then
        mnt_bind "\$MAGISKTMP/.magisk/mirror/data/\$SRC/\$DATA" "\$MAGISKTMP/.magisk/mirror/data"
    elif [ "\$inode_data2" == "\$inode_data" ]; then
        mnt_bind "\$MAGISKTMP/.magisk/mirror/data/\$SRC/data" "\$MAGISKTMP/.magisk/mirror/data"
    fi
fi )

( # fix mount system mirror
CHECKROOTFS="\$(mountpoint -d "/")"
if [ "\${CHECKROOTFS%:*}" == "0" ]; then
  # rootfs
  system_dir=/system
  system_blkname=system
else
  # system-as-root
  system_dir=/
  system_blkname=system_root
fi
system_inode="\$(ls -id "\$system_dir" | awk '{ print \$1 }')"
dmesg_log "System inode = [\$system_inode]"
[ "\$system_inode" == "1" ] && exit # can't fix
if [ "\$system_inode" != "2" ] && [ "\$system_inode" != "3" ]; then
    dmesg_log "\$system_dir is non-device mountpoint"
    CHECKBLOCK="\$(mountpoint -d "\$system_dir")"
    blk_major="\${CHECKBLOCK%:*}"
    blk_minor="\${CHECKBLOCK: \${#blk_major}+1}"
    mknod -m 660 "\$MAGISKTMP/.magisk/block/\$system_blkname" b "\$blk_major" "\$blk_minor"
    mkdir -p "\$MAGISKTMP/.magisk/mirror/\$system_blkname"
    mount "\$MAGISKTMP/.magisk/block/\$system_blkname" "\$MAGISKTMP/.magisk/mirror/\$system_blkname" && dmesg_log "mount: \$MAGISKTMP/.magisk/block/\$system_blkname -> \$MAGISKTMP/.magisk/mirror/\$system_blkname"
    rm -rf "\$MAGISKTMP/.magisk/block/\$system_blkname"
    mknod -m 660 "\$MAGISKTMP/.magisk/block/\$system_blkname" b 0 0
    touch "\$MAGISKTMP/.magisk/block/\$system_blkname"
    chattr +i "\$MAGISKTMP/.magisk/block/\$system_blkname"

    test -z "\$SRC" && SRC="\${BIPATH%/*}"
    test -z "\$SRC" && exit

    inode_system_mirror=\$(ls -id "\$MAGISKTMP/.magisk/mirror/\$system_blkname/\$SRC/system" | awk '{ print \$1 }')
    inode_system=\$(ls -id "\$system_dir" | awk '{ print \$1 }')

    if [ "\$inode_system_mirror" == "\$inode_system" ]; then
        mnt_bind "\$MAGISKTMP/.magisk/mirror/\$system_blkname/\$SRC/system" "\$MAGISKTMP/.magisk/mirror/\$system_blkname"
    fi
fi
)


# revert all changes because all patch files have been loaded by init
revert_changes


EOF

cat <<EOF >/magisk/overlay.d.sh


replace(){
local TARGET="\$1"
local DEST="\$2"

if [ -d "\$TARGET" ]; then
        [ -L "\$DEST/\$TARGET" ] && return 0
        for a in \`ls "\$TARGET"\`; do
            ( replace "\$TARGET/\$a" "\$DEST" ) &
        done
else
        case "\$TARGET" in
            *.rc)
                # inject custom rc script
                debug_log "initrd-magisk: overlay.d: rc_script add \$TARGET"
                echo -e "\n\$(cat "\$TARGET" | sed "s|\\\${MAGISKTMP}|\$MAGISKTMP|g")" >>"\$INITRC"
                ;;
            *)
                [ -L "\$DEST/\$TARGET" ] && return 0
                [ -e "\$DEST/\$TARGET" ] || return 0
                debug_log "initrd-magisk: overlay.d: replace \$DEST/\$TARGET"
                mount --bind "\$TARGET" "\$DEST/\$TARGET"
                ;;
        esac
fi
}

cd "\$OVERLAYDIR"

for item in \`ls \$OVERLAYDIR\`; do
    case "\$item" in
        "data")
            # ignore
            ;;
         "init.rc")
            # ignore
            ;;
         "init")
            # ignore
            ;;
         "sepolicy")
            # ignore
            ;;
         "sbin")
            mkdir -p "\$MAGISKDIR/sbin"
            cp -af "\$OVERLAYDIR/sbin/"* "\$MAGISKDIR/sbin"
            ;;
        *)
            # replace existing files in root directory
            replace "\$item" "/android"
            ;;
    esac
done

EOF

cat <<EOF >/magisk/magisksu_survival.sh

MAGISKTMP=\${{MAGISKTMP}}
export PATH="\$MAGISKTMP:\$PATH"

# prevent /system/bin/su from removing

if mount | grep -q " /system/bin " && [ -f "/system/bin/magisk" ]; then
    [ -L /system/bin/su ] || umount -l /system/bin/su
    rm -rf /system/bin/su
    ln -fs ./magisk /system/bin/su
    mount -o ro,remount /system/bin
fi

# mount all drives
( for blkdisk in /dev/block/[hmnsvx][dmrv][0-9a-z]*; do
        if [ -b "\$blkdisk" ]; then
            BLOCKNAME="\${blkdisk##*/}"
            CHECKBLOCK="\$(mountpoint -x "/dev/block/\$BLOCKNAME")"
            blk_major="\${CHECKBLOCK%:*}"
            blk_minor="\${CHECKBLOCK: \${#blk_major}+1}"
            mknod -m 666 "\$MAGISKTMP/.magisk/block/\$BLOCKNAME" b "\$blk_major" "\$blk_minor"
            mkdir -p "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME"
            mount.fuse "\$MAGISKTMP/.magisk/block/\$BLOCKNAME" "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME"
            mountpoint -q "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME" || mount "\$MAGISKTMP/.magisk/block/\$BLOCKNAME" "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME"
            mountpoint -q "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME" || mount -o ro "\$MAGISKTMP/.magisk/block/\$BLOCKNAME" "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME"
            mount -o ro,remount "\$MAGISKTMP/.magisk/mirror/\$BLOCKNAME"
        fi
done
# remove empty directory
rmdir \$MAGISKTMP/.magisk/mirror/* 
) &

EOF


}


init_magisk(){
# exit when detect itself

test -e /dev/.initrd-magisk && abort "WARING: Invalid initialization! Exit in 5 second..."

# point out that initrd-magisk is already used

rm -rf /dev/.initrd-magisk
echo -n >/dev/.initrd-magisk

clear

. /bin/utils.sh
. /bin/info.sh

install_utils
prepare_script

echo_log "initrd-magisk Android x86 $initrd_magisk_ver"
echo -n Initialize system environment...

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`

debug_log "initrd-magisk: Android source = [$SRC]"

for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			SRC=iso
			eval `echo $c | cut -b1-3,18-`
			;;
		*)
			;;
	esac
done


if [ ! -f "/first_stage/init" ]; then
    mkdir -p /first_stage
    mkdir -p /tmp
    mount -t tmpfs tmpfs /first_stage
    mount -t tmpfs tmpfs /tmp
    cd /first_stage
    while :; do
	    for device in ${ROOT:-/dev/[hmnsvx][dmrv][0-9a-z]*}; do
		check_root $device && break 2
		mountpoint -q /mnt && umount /mnt
	    done
	    sleep 1
	    echo -n .
    done
fi

# patched initrd
if mountpoint -q /first_stage && [ -f /first_stage/first_stage/init ] && [ ! -z "$INITRD_IMAGE" ]; then
    echo -en "\nRestore initial ramdisk image..."
    ( cd /first_stage/first_stage; find * | cpio -o -H newc | gzip >"$INITRD_IMAGE" ) && echo "Done" || echo "Failed"
    echo "Reboot in 5 seconds..."
    sleep 5
    echo b >/proc/sysrq-trigger
fi

debug_log "initrd-magisk: device block = [$device]"

# do not allow real initrd override files
rm -rf \
/first_stage/bin/utils.sh \
/first_stage/bin/magisk.sh \
/first_stage/bin/info.sh \
/first_stage/scripts/*magisk* \
/first_stage/magisk

echo ""

( # disable magisk with flag FIXFS

if [ "$FIXFS" == "1" -o "$SAFEMODE" == "1" ]; then
    echo_log "Disable all Magisk modules"
    mkdir /data
    mount_data_part /data
    for magisk_module in $(ls /data/adb/modules); do
        echo -n >/data/adb/modules/$magisk_module/disable && debug_log "initrd-magisk: disable $magisk_module"
    done
    umount -l /data
fi
)


MAGISKBASE=MAGISK_FILES_BASE
rm -rf /scripts/*magisk*

# BEGIN
    cp /bin/magisk.sh /scripts/99_magisk
    mkdir -p "$MAGISKCORE"
    cp "$APKFILE" "$MAGISKCORE/magisk.apk"
    mv -f "$APKFILE" "${APKFILE}.bk"
    APKFILE="$MAGISKCORE/magisk.apk"
    extract_magisk_apk
    magisk_loader
# END


# continue boot

cp -af /first_stage/* /
umount -l /first_stage
rm -rf /first_stage
debug_log "initrd-magisk: exec original /init"
chmod 777 /init; exec /init
}

init_magisk

